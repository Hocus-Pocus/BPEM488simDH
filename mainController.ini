[TunerStudio]

;***************************************************************************
; - Title: mainController.ini BPEM488 Dedicated hardware version (BPEM488.s)
; - Date: 12/08/20
; - Text editor: Notepad++
;
;***************************************************************************
;Preamble:
; At this point it looks like when TS makes contact with BPEM488, it first 
; sends the Query command, Then the version info command, then the pageRead  
; Command, then the ochGetCommand. ochGetCommand is repeated every ~ 65 ms
; (estimated) pageValueWrite command is sent when any constant value is 
; modified in TSburnCommand is sent when the "Burn" button is pressed after 
; modified in TS

   queryCommand = "Q"  ; Returns "Signature" in the code. "Signature" must match "signature" below 
   signature = "MS2Extra comms342h2" ; This must be used in order to communicate with Tuner Studio and Shadow Dash
;               1234567890123456789  ; 19 bytes
   versionInfo = "S"   ; Returns the current revision number, "RevNum" in the code 
                       ; and places it in the title bar in the tuner Studio main screen
                       
[Constants]

;***************************************************************************
; - Page size must be => number of constants
;***************************************************************************

;comms settings - you may need to tweak these for USB serial
;e.g. put writeblocks off and add an interwrite delay
;   pageActivationDelay = 50
;   writeBlocks         = on
;   interWriteDelay     = 10
;end USB settings
;*******************************************
;Megashift .ini
;   pageActivationDelay = 250 ; Milliseconds delay after burn command.
;   blockReadTimeout    = 180 ; Milliseconds total timeout for reading page.
;    blockReadTimeout    = 500 ; Milliseconds total timeout for reading page.

; The commands sent to the GPIO are formatted "command\CAN_ID\table_ID"
;    %2i is the id/table number - 2 bytes, the first byte is always the 
;    CAN ID of 01, whether you want it or not. The second byte is the page ID
;    %2o is the table offset - 2 bytes
;    %2c is the number of bytes to be read/written
;    %v is the byte to be written

; Example: from TS comm log
; Time: 0:33.314: SENT, 7 bytes
; x72 x01 x07 x00 x38 x00 x08
; 'r',  can_id=1, table=7 (outpc), offset 38h (56 decimal), send 8 bytes

   pageActivationDelay =  50 ; Milliseconds delay after burn command.
   blockReadTimeout    = 200 ; Milliseconds total timeout for reading page.

   endianness          = big
   nPages              = 3
   pageSize            = 1024,            1024,            1024
   pageIdentifier      = "\x01\x01",     "\x01\x02",     "\x01\x03"
   burnCommand         = "B%2i",         "B%2i",         "B%2i"
   pageReadCommand     = "C%2i%2o%2c",   "C%2i%2o%2c",   "C%2i%2o%2c"
   pageValueWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
   pageChunkWrite      = "W%2i%2o%2c%v", "W%2i%2o%2c%v", "W%2i%2o%2c%v"
   writeBlocks         = on
   interWriteDelay     = 10

    ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate        Note! This is from MS .ini files and is wrong
   ;    userValue = (msValue + translate) * scale        Note! This is from MS .ini files and is wrong
   ;
   ;    msValue   = (userValue - translate) * scale      Note! This is correct
   ;    userValue = (msValue * scale) + translate        Note! This is correct
   ;
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out as follows.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ;----------------------------------------------------------------------------

page = 1

   ;  name         = bits,   type, offset,    bits
   ;  name         = array,  type, offset,   shape,   units,   scale, translate,      lo,      hi,   digits
   ;  name         = scalar, type, offset,            units,   scale, translate,      lo,      hi,   digits
   veTable1        = array,   U16,      0, [18x18],     "%", 0.10000,   0.00000,     0.0,   150.0,   1 ;(648 bytes)(% x 10)
   frpm_table1     = array,   U16,    648,   [18],    "RPM", 1.00000,   0.00000,     1.0,  5000.0,   0 ;(36 bytes)(RPM)
   fmap_table1     = array,   U16,    684,   [18],    "KPA", 0.10000,   0.00000,     0.0,   100.0,   1 ;(36 bytes)(KPA x 10)

   barCorVals      = array,   U16,    720,    [9],    "KPA", 0.10000,   0.00000,     0.0,   110.0,   1 ;(18 bytes)(KPA x 10)
   barCorDelta     = array,   S16,    738,    [9],      "%", 0.10000,   0.00000,    80.0,   120.0,   1 ;(18 bytes)(% x 10)
   dwellvolts      = array,   U16,    756,    [6],      "V", 0.10000,   0.00000,     6.0,    18.0,   1 ;(12 bytes)(V x 10)
   dwellcorr       = array,   U16,    768,    [6],      "%", 0.10000,   0.00000,     0.0,   500.0,   1 ;(12 bytes)(% x 10)
#if CELSIUS
   tempTable1      = array,   S16,    780,   [10],     "°C", 0.05555,  -320.000,   -40.0,   150.0,   1 ;(20 bytes)(degree C x 10)
   tempTable2      = array,   S16,    800,   [10],     "°C", 0.05555,  -320.000,   -40.0,   150.0,   1 ;(20 bytes)(degree C x 10)
   matCorrTemps2   = array,   S16,    820,    [9],     "°C", 0.05555,  -320.000,   -40.0,   150.0,   1 ;(18 bytes)(degree C x 10)
#else
   tempTable1      = array,   S16,    780,   [10],     "°F", 0.10000,   0.00000,   -40.0,   250.0,   1 ;(20 bytes)(degree F x 10)
   tempTable2      = array,   S16,    800,   [10],     "°F", 0.10000,   0.00000,   -40.0,   250.0,   1 ;(20 bytes)(degree F x 10)
   matCorrTemps2   = array,   S16,    820,    [9],     "°F", 0.10000,   0.00000,   -40.0,   250.0,   1 ;(18 bytes)(degree F x 10)
#endif
   matCorrDelta2   = array,   U16,    838,    [9],      "%", 0.10000,   0.00000,    73.0,   126.0,   1 ;(18 bytes)(% x 10)
   primePWTable    = array,   U16,    856,   [10],   "mSec", 0.10000,   0.00000,     0.0,    70.0,   1 ;(20 bytes)(mSec x 10)
   crankPctTable   = array,   U16,    876,   [10],      "%", 0.10000,   0.00000,     0.0,   500.0,   0 ;(20 bytes)(% x 10)
   asePctTable     = array,   U16,    896,   [10],      "%", 0.10000,   0.00000,     0.0,   100.0,   1 ;(20 bytes)(% x 10)
   aseRevTable     = array,   U16,    916,   [10],   "Revs", 1.00000,   0.00000,     0.0, 65535.0,   0 ;(20 bytes)(engine revolutions)
   wueBins         = array,   U16,    936,   [10],      "%", 0.10000,   0.00000,     0.0,   200.0,   1 ;(20 byte)(% x 10)
   taeBins         = array,   U16,    956,    [4],      "%", 1.00000,   0.00000,     0.0,   100.0,   0 ;(4 bytes)(%) taebins table
   taeRates        = array,   U16,    964,    [4],  "%/Sec", 1.00000,   0.00000,     0.0,   600.0,   0 ;(8 bytes)(V/s) taebins table
   DdBndBase       = scalar,  U16,    972,           "mSec", 0.01000,   0.00000,     0.0,     2.0,   2 ;(1 byte)(mSec x 100)
   DdBndCor        = scalar,  U16,    974,         "mSec/V", 0.01000,   0.00000,     0.0,    20.0,   2 ;(1 byte)(mSec/V x 100)
   tpsThresh       = scalar,  U16,    976,         "tpsDOT", 1.00000,   0.00000,     0.0,   100.0,   0 ;(2 bytes)(%/Sec) 
   TOEtime         = scalar,  U16,    978,           "mSec", 0.10000,   0.00000,     0.0,   100.0,   1 ;(1 byte)(mSec x 10) 
   ColdAdd         = scalar,  U16,    980,              "%", 1.00000,   0.00000,     0.0,   100.0,   0 ;(1 byte)(%) 
   ColdMul         = scalar,  U16,    982,              "%", 1.00000,   0.00000,     0.0,   300.0,   0 ;(1 bytes)(%) 
   InjDelDegx10    = scalar,  U16,    984,            "Deg", 0.10000,   0.00000,     0.0,   260.0,   1 ;(2 bytes)(degree x 10)
   OFCtps          = scalar,  U16,    986,           "TPS%", 0.10000,   0.00000,     0.0,    10.0,   1 ;(1 byte)(TPS%x10)
   OFCrpm          = scalar,  U16,    988,            "RPM", 1.00000,   0.00000,     0.0,  5000.0,   0 ;(2 bytes)(RPM)
   OFCmap          = scalar,  U16,    990,            "KPA", 0.10000,   0.00000,     0.0,   100.0,   1 ;(2 bytes)(KPA x 10)
   OFCdel          = scalar,  U16,    992,            "Sec", 0.10000,   0.00000,     0.0,    10.0,   1 ;(1 byte)(Sec x 10) 
   crankingRPM     = scalar,  U16,    994,            "RPM", 1.00000,   0.00000,     0.0,   500.0,   0 ;(2 bytes)(RPM)
   floodClear      = scalar,  U16,    996,              "%", 0.10000,   0.00000,     0.0,   100.0,   1 ;(2 bytes)(% x 10)
   Stallcnt        = scalar,  U16,    998,            "cnt", 1.00000,   0.00000,     0.0, 65535.0,   1 ;(2 bytes)(count)
   tpsMin          = scalar,  U16,   1000,            "ADC", 1.00000,   0.00000,     0.0,  1023.0,   0 ;(2 bytes)(ADC)
   tpsMax          = scalar,  U16,   1002,            "ADC", 1.00000,   0.00000,     0.0,  1023.0,   0 ;(2 bytes)(ADC)
   reqFuel         = scalar,  U16,   1004,             "mS", 0.10000,   0.00000,     0.0, 65535.0,   1 ;(2 bytes)(mSec x 10)
   enginesize      = scalar,  U16,   1006,             "cc", 1.00000,   0.00000,     0.0, 65536.0,   0 ;(2 bytes)(CC)
   InjPrFlo        = scalar,  U16,   1008,           "L/Hr", 0.01000,   0.00000,     0.0,   600.0,   2 ;(2 bytes)(L/Hr)   
   staged_pri_size = scalar,  U08,   1010,             "cc", 1.00000,   0.00000,     0.0, 65536.0,   0 ;(1 byte)(CC)
   alternate       = bits,    U08,   1011,            [0:0], "INVALID", "Alternate"                ;(1 byte)
   nCylinders      = bits,    U08,   1012,            [0:4], "INVALID","INVALID","2","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID" ;(1 byte)
   nInjectors      = bits,    U08,   1013,            [0:4], "INVALID","INVALID","2","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID","INVALID" ;(1 byte)
   divider         = scalar,  U08,   1014,               "", 1.00000,  0.00000,    1.0,     1.0,    0 ;(1 byte)(number 1)
   
; 1014+1=1015 bytes. 1024-1015=9 bytes left
;  NOTE! Exact VE table names required for MLV

page = 2

   stBins          = array,   U16,     0, [18x18],   "Deg",     0.1,       0.0,    0.0,    50.0,   1 ;(648 bytes)(degree x 10)
   strpmBins       = array,   U16,   648,   [18],    "RPM",     1.0,       0.0,    1.0,  5000.0,   0 ;(36 bytes)(RPM) 
   stmapBins       = array,   U16,   684,   [18],    "KPA",     0.1,       0.0,    0.0,   100.0,   1 ;(36 bytes)(KPA x 10)
   heton           = scalar,  U16,   720,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hetoff          = scalar,  U16,   722,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hoton           = scalar,  U16,   724,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hotoff          = scalar,  U16,   726,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hfton           = scalar,  U16,   728,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hftoff          = scalar,  U16,   730,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(degree F x 10)
   hegton          = scalar,  U16,   732,             "°F", 1.00000,   0.00000, -40.00,  1500.0,   0 ;(2 bytes)(degree F)
   hegtoff         = scalar,  U16,   734,             "°F", 1.00000,   0.00000, -40.00,  1500.0,   0 ;(2 bytes)(degree F)
   lopon           = scalar,  U16,   736,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   lopoff          = scalar,  U16,   738,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   hfpon           = scalar,  U16,   740,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   hfpoff          = scalar,  U16,   742,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   lfpon           = scalar,  U16,   744,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   lfpoff          = scalar,  U16,   746,             "°F", 0.10000,   0.00000, -40.00,   300.0,   1 ;(2 bytes)(PSI x 10)
   Dwell           = scalar   U16    748,           "mSec",     0.1,       0.0,    0.0,    10.0,   1 ; (1 byte)(mSec x 10)       
   CrnkDwell       = scalar   U16    750,           "mSec",     0.1,       0.0,    0.0,    10.0,   1 ; (1 byte)(mSec x 10)
   CrnkAdv         = scalar   U16    752,            "Deg",     0.1,       0.0,    0.0,    10.0,   1 ; (1 byte)(Deg x 10)

   
; 752+2=754 bytes 1024-754=270 bytes left

page = 3

   afrTable1       = array,   U16,     0, [18x18],   "AFR",    0.01,       0.0,     0.0,    20.0,   2 ;(648 bytes)(AFR x 100)
   arpm_table1     = array,   U16,   648,   [18],    "RPM",     1.0,       0.0,     1.0,  5000.0,   0 ;(36 bytes)(RPM)
   amap_table1     = array,   U16,   684,   [18],    "KPA",     0.1,       0.0,     0.0,   100.0,   1 ;(36 bytes)(KPA x 10)

; 684+36=720 bytes 1024-720=304 bytes left
;  NOTE! Exact AFR table names required for MLV

[SettingContextHelp]
; constantName = "Help Text"
; tool tips tooltips

;    rpmLF           = "Smoothing factors. 100% = no smoothing. 10% = highly smoothed."
;    mapLF           = "Smoothing factors. 100% = no smoothing. 10% = highly smoothed."
;    tpsLF           = "Smoothing factors. 100% = no smoothing. 10% = highly smoothed."
;    egoLF           = "Smoothing factors. 100% = no smoothing. 10% = highly smoothed."
;    adcLF           = "Smoothing factors. 100% = no smoothing. 10% = highly smoothed."
    barCorDelta     = "There are two ways that barometric correction may be used.\n\n1. The current way. On the MAP/Baro page the 'At total vacuum' and 'rate' numbers must be set to zero. This curve is then normally 100% at all points and adjusted up or down to alter fuelling based on the barometer reading.\n\n2. The old way. The two numbers are set to 147 and -47 and the curve is normally 0% at all points."
    matCorrDelta2   =  "This curve is the whole air density correction exposed in full.\nIt is based on the 'ideal gas law' and typically varies between 125% cold to 75% hot."
    dwellcorr       = "Specifies the percentage adjustment to the nominal dwell based on battery voltage.\nInductive coils require greater dwell (charge time) at lower voltages."
    enginesize      = "Displacement of two engine cylinders in cc. Fill this in before using the ReqFuel calculator.\nTo convert from cu.in to cc, multiply by 16.39. BEPM uses semi-sequential fuel injection which fires injectors in pairs. In order to calculate reqFuel the displacement of two cylinders is used."
    staged_pri_size = "The size of each of your injectors in cc/min.\nTypical conversion from lbs/hr is multiply by 10.5"
    nCylinders      = "BEPM uses semi-sequential fuel injection which fires injectors in pairs. In order to calculate reqFuel the number of cylinders used is limited to two."
    reqFuel         = "Global fuel constant. Use the ReqFuel calculator. (Technically related to a pulsewidth at 100%VE)\n\nFirst, fill in all settings below and then click the [Required Fuel] button."
    nInjectors      = "BEPM uses semi-sequential fuel injection which fires injectors in pairs. In order to calculate reqFuel the number of injectors used is limited to two."
    alternate       = "BEPM uses semi-sequential fuel injection which fires injectors in pairs once each crankshaft revolution. In order to calculate reqFuel injector staging is limited to simultaneous."
;    afrBins         = "Sets the target AFR vs RPM/load."
    afrTable1         = "Sets the target AFR vs RPM/load."
;    veBins          = "The fuel table. Larger VE values mean more fuel, smaller mean less fuel."
    veTable1        = "The fuel table. Larger VE values mean more fuel, smaller mean less fuel."
    stBins          = "The ignition advance table. Numbers are actual timing BTDC.\n Be sure to have verified timing before starting tuning."
    crankPctTable   = "This percentage table controls the fuel injected when the engine is cranking over. Most engines need 200-400% when cold and near 100% when hot.\n(It is a percentage of ReqFuel, so that if you swap injectors, this curve can be left alone.)"
    asePctTable     = "Immediately after the engine has started it is normal to need additional fuel. This curve specifies how much as a percentage adder. (5-50%)"
    aseCntTable     = "Specifies how long (in engine cycles or seconds) to apply afterstart enrichment."
    taeBins         = "The curve specifies a fuel pulsewidth percent adder based on rate of change of TPS (TPSdot)\nThis is part of the basic time based accel enrichment scheme. Larger changes in TPS require more fuel added. The number is a percentage of ReqFuel."
    OFCrpm          = "This is the minimum RPM permissive for manual decel fuel cut"
    OFCtps          = "This is the minimum TPS% permissive for manual decel fuel cut"
    tpsMin          = "With engine off, set TPS at minimum (foot off pedal) then click 'get current'"
    tpsMax          = "With engine off, set TPS at maximum (foot to floor) then click 'get current'" 
    barCorDelta     = "This curve is taken from the "barofactor4250.inc" file for MSnS Extra and is limited at a low atmospheric pressure of 79 KPA and a high atmospheric pressure of 103 KPA"
    taeColdAdd      = "Accel enrich fuel to add when at -40F (mS x 10)(max 25.5mS)"
;    taeColdMul      = "Accel enrich fuel correction when at -40F (%)(100 = no correction, 255 = 255% correction)
    
    
[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;     std_accel
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

    menuDialog = main
      menu = "Basic Settings"
        subMenu = base,                 "Engine Settings"
        subMenu = std_separator ;----------------------------------------------
        subMenu = std_separator ;----------------------------------------------
        subMenu = barometerCorr,        "Barometric Correction" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = manifoldTempCorr2,    "MAT air density table"
        subMenu = std_separator ;----------------------------------------------
        subMenu = alarmset,             "Engine Alarm Settings"        
        subMenu = std_separator ;---------------------------------------------- 
        subMenu = tpsCalib,          "&TPS Calibration"
        subMenu = std_separator ;----------------------------------------------
        subMenu = dwellset,             "Dwell Settings"   
		
      menu = "F&uel Settings"
        subMenu = injChars,             "Injector Settings"
        subMenu = std_separator ;----------------------------------------------
        subMenu = veTableTbl,           "&VE Table" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = afrTableTbl,          "&AFR Table" 

      menu = "&Ignition Settings"
        subMenu = dwellSettings,        "D&well battery correction" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = std_separator ;----------------------------------------------
        subMenu = stTableTbl,	        "&ST Table" 
        
      menu = "&Cranking/Startup"
        subMenu = crsettings,          "Cranking/startup settings" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = primingPW,           "Pri&ming Pulse" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = crankingPW,          "Cra&nking Pulse" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = nestedasePct,        "Afterstart (ASE) Percentage" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = aseTaper,            "Afterstart (ASE) Taper" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = nestedwarmup_curve,  "&Warmup Enrichment (WUE)" 
        
      menu = "Accel Enrich"
        subMenu = AEtime_settings,     "Time-based Accel" 
        
      menu = "&Tuning"
        subMenu = std_realtime,        "&Realtime Display"
        subMenu = std_separator ;----------------------------------------------
        subMenu = veTableMap,          "&VE Table" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = stTableMap,          "&ST Table" 
        subMenu = std_separator ;----------------------------------------------
        subMenu = afrTableMap,         "&AFR Table"
        
      menu = "Data Logging"


;-----------------------------------------------------------------------------------------------

[UserDefined]

;   lineN  = label,                             page number or offset-in-constants
    dialog = airden_words
       field = "This curve is the whole air density correction exposed in full."
       field = "It is based on the 'ideal gas law' and typically varies between 125% cold to 75% hot."

    dialog = injChars, "Injector Settings"
       field = "Injector Dead Time @13.2V",                       DdBndBase
       field = "Battery Voltage Correction",                      DdBndCor
	   field = "Injector timing delay",                           InjDelDegx10
	   field = "Injector pair flow rate",                         InjPrFlo        

    dialog = manifoldTempCorr2, "MAT air density correction"
       panel = airden_words
       panel = airdenCorr
        
   dialog = crsettings, "Cranking settings"
      field = "Cranking RPM",                                  crankingRPM
	  field = "Above this RPM we are in Run mode"
      field = ""
      field = "Flood clear TPS",                               floodClear
      field = "Above this throttle no fuel is injected"
	  field = ""
	  field = "Stall counter",                                 Stallcnt
	  field = "Decremented every mSec"
	  
      
    dialog = wc_note
        field = "For 99% of engines, warmup must have 100% in the final row. Typical maximum is 255% (cold)."

    dialog = nestedwarmup_curve, "Warmup Enrichment percent multiplier"
        panel = warmup_curve
        panel = wc_note

    dialog = ase_note
        field = "The typical range for afterstart is 50% (cold) to 5% (warm)"

    dialog = nestedasePct, "Afterstart Enrichment (ASE) percent adder"
        panel = asePct
        panel = ase_note
      
;   dialog = nestedasePct, "Afterstart Enrichment (ASE) percent adder"
;      panel = asePct
;      panel = ase_note
        
;   dialog = nestedwarmup_curve, "Warmup Enrichment (WUE) Percent Multiplier"
;      panel = warmup_curve
;      panel = wc_note
        
   dialog = time_ae_south_east, ""
      field = "Accel TPSdot threshold(tpsThresh)",                    tpsThresh
      field = "Cold Accel Adder(ColdAdd)",                            ColdAdd
      field = "Cold Accel Multiplier(ColdMul)",                       ColdMul
      field = "Throttle Opening Enrichment Time (100mS inc)(TOEime)", TOEtime
      field = "Overrun Fuel Cut min RPM(OFCrpm)",                     OFCrpm
      field = "Overrun Fuel Cut min TPS%(OFCtps)",                    OFCtps
	  field = "Overrun Fuel Cut min MAP(OFCmap)",                     OFCmap
	  field = "Overrun Fuel Cut Delay(OFCdel)",                       OFCdel
 

   dialog = time_ae_south_south, "", xAxis
      panel = time_ae_south_east
        
   dialog = time_ae_south, "", yAxis
      liveGraph = timeaeGraph, "AE Graph", South
      graphLine = afr1
      graphLine = TPSdot, "%", -2000, 2000, auto, auto
      panel = time_ae_south_south

   dialog = time_ae_north, "", xAxis
      panel = time_accel_tpsdot_curve, East

   dialog = AEtime_settings, "Time-based Accel Enrichment", yAxis
      panel = time_ae_north
      panel = time_ae_south
      
   dialog = tpsCalib,"Throttle Position Sensor Calibrator"                
      field  = "Closed Throttle TPS ADC counts",             tpsMin
      field  = "Wide Open Throttle TPS ADC counts",          tpsMax
      
   dialog = base3, "", yAxis
      field = "Displacement of two cylinders",                enginesize
      field = "Injector size each",                           staged_pri_size
	 
   dialog = base2, "", yAxis
      panel = std_injection, North
      panel = base3, South
        
   dialog = base, "Engine Settings", border
         panel = base2, West
         
   dialog = alarmset, "Engine alarm settings"
      field = "High engine temp alarm on ",                 heton
      field = "High engine temp alarm off ",                hetoff
      field = "High oil temp alarm on ",                    hoton
      field = "High oil temp alarm off ",                   hotoff
      field = "High fuel temp alarm on ",                   hfton
      field = "High fuel temp alarm off ",                  hftoff
      field = "High exhaust gas temp alarm on ",            hegton
      field = "High exhaust gas temp alarm off ",           hegtoff
      field = "Low oil pressure alarm on ",                 lopon
      field = "Low oil pressure alarm off ",                lopoff
      field = "High fuel pressure alarm on ",               hfpon
      field = "High fuel pressure alarm off ",              hfpoff
      field = "Low fuel pressure alarm on ",                lfpon
      field = "Low fuel pressure alarm off ",               lfpoff
      
   dialog = dwellset,  "Dwell settings"
      field = "Run mode dwell",                             Dwell
      field = "Crank mode dwell",                           CrnkDwell
      field = "Crank advance",                              CrnkAdv


      

;-----------------------------------------------------------------------------------------------

[CurveEditor]

  curve = barometerCorr, "Barometric Correction"
          columnLabel = "Barometer", "Correction"
          xAxis       = 60, 120, 9
          yAxis       = 80, 120, 9
          xBins       = barCorVals, Baro
          yBins       = barCorDelta
          gauge       = BaroGge
          
  curve = airdenCorr, "MAT Air density"
          columnLabel = "Air temp", "Correction"
          xAxis       =  -40, 250, 9
          yAxis       =  70,  130, 9
          xBins       = matCorrTemps2, Mat
          yBins       = matCorrDelta2
          gauge       = MatGauge
      
  curve = dwellSettings, "Dwell Battery Adjustment"
          columnLabel = "Voltage", "%age"
          xAxis       = 6, 16,  6
          yAxis       = 0, 500, 6
          xBins       = dwellvolts, BatV
          yBins       = dwellcorr
          gauge       = BatVGge
         
        curve = primingPW, "Priming Pulsewidth"
          columnLabel = "Coolant", "Prime PW"
          xAxis       = -40, 250, 10
          yAxis       =   0,  65, 10
          xBins       = tempTable2, CLT
          yBins       = primePWTable
          gauge       = CltGauge
      
   curve = crankingPW, "Cranking Pulsewidth"
           columnLabel = "Coolant", "Cranking PW"
           xAxis       = -40,  250, 10
           yAxis       =   0,  500, 10
           xBins       = tempTable2, CLT
           yBins       = crankPctTable
           gauge       = CltGauge
      
   curve = asePct, "Afterstart Enrichment Percentage"
           columnLabel = "Coolant", "Afterstart"
           xAxis       = -40, 250, 10
           yAxis       =   0, 100, 10
           xBins       = tempTable2, CLT
           yBins       = asePctTable
           gauge       = CltGauge

   curve = aseTaper, "Afterstart Enrichment Taper"
           columnLabel = "Coolant", "Taper"
           xAxis       = -40, 250, 10
           yAxis       =   0, 500, 10
           xBins       = tempTable2, CLT
           yBins       = aseRevTable
           gauge       = CltGauge
           
   curve = warmup_curve, "Warmup Enrichment (WUE) Curve"
           columnLabel = "Coolant", "WUE %"
           xAxis       = -40,  250, 10
           yAxis       =   0,  500, 10
           xBins       = tempTable1, CLT
           yBins       = wueBins
           gauge       = CltGauge
          
   curve = time_accel_tpsdot_curve, "TPS based AE"
           columnLabel = "TPSdot", "Added"
           xAxis       = 0, 1200, 4
           yAxis       = 0,  48, 4
           xBins       = taeRates, TPSdot
           yBins       = taeBins
           gauge       = TPSdotGge



[TableEditor]
;            table_id,    map3d_id,     "title",  page
   table = veTableTbl,  veTableMap,  "VE Table1",   1  
;                    constant, variable
       xBins       = frpm_table1, RPM
       yBins       = fmap_table1, Map
       zBins       = veTable1
      
      gridHeight  = 2.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.
      upDownLabel = "(RICHER)", "(LEANER)"
      
;            table_id,    map3d_id,     "title",  page
   table = stTableTbl,  stTableMap,  "ST Table",   2  
;                    constant, variable
      xBins       = strpmBins,  RPM
      yBins       = stmapBins,  Map
      zBins       = stBins

      gridHeight  = 2.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.
      upDownLabel = "(RICHER)", "(LEANER)"
      
;            table_id,      map3d_id,      "title",  page
   table = afrTableTbl,  afrTableMap,  "AFR Table1",   3  
;                     constant, variable
      xBins       = arpm_table1, RPM
      yBins       = amap_table1, Map
      zBins       = afrTable1

      gridHeight  = 2.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.
      upDownLabel = "(RICHER)", "(LEANER)"

[FrontPage]
   ; Gauges are numbered left to right, top to bottom.
   ;    1  2  3  4
   ;    5  6  7  8
   ; currently a minimum of 6 gauges must be on the dash, this appears to be an old not needed limitation. next release 1 will work.
   gauge1 = CltGauge
   gauge2 = CltGauge
   gauge3 = CltGauge
   gauge4 = CltGauge
   gauge5 = CltGauge
   gauge6 = CltGauge
   
   ;----------------------------------------------------------------------------
   ; Indicators
   ;                 expression,   off-label,    on-label,   off-bg, off-fg, on-bg, on-fg
   ; NOTE! the colours in the .ini file mean nothing. They are set in designer mode color dialog
   
;  "engine" bit field: 

   indicator = { OFCdelon     }, "OFC Delay Off",     "OFC Delay On",    white, black, green, black
   indicator = { crank        }, "Not Crank Mode",      "Crank Mode",    white, black, green, black
   indicator = { run          }, "Not Run Mode",          "Run Mode",    white, black, green, black
   indicator = { ASEon        }, "ASE off",                 "ASE on",    white, black, green, black
   indicator = { WUEon        }, "WUE off",                 "WUE on",    white, black, green, black
   indicator = { TOEon        }, "TOE Enr off",         "TOE Enr on",    white, black, green, black
   indicator = { OFCon        }, "OFC off",                 "OFC on",    white, black, green, black
   indicator = { FldClr       }, "Flood Clear off", "Flood Clear on",    white, black, green, black
      
;  "PortAbits" bit field:

   indicator = { LoadEEEM     }, "LoadEEEM Off",       "LoadEEEM On",     white, black, green, black
   indicator = { Itrimen      }, "Itrimen Off",         "Itrimen On",     white, black, green, black
   indicator = { Ftrimen      }, "Ftrimen Off",         "Ftrimen On",     white, black, green, black
   indicator = { AudAlrmSil   }, "AudAlrmSil Off",   "AudAlrmSil On",     white, black, green, black
   indicator = { OFCen        }, "OFCen Off",             "OFCen On",     white, black, green, black
   indicator = { OFCdis       }, "OFCdis Off",           "OFCdis On",     white, black, green, black
   indicator = { PA6in        }, "PA6in Lo",              "PA6in Hi",     white, black, green, black
   
;  "PortBbits" bit field:

   indicator = { FuelPump     }, "Fuel pump Off",     "Fuel pump On",  white, black, green, black
   indicator = { ASDRelay     }, "ASD Relay Off",     "ASD Relay On",  white, black, green, black
   indicator = { EngAlarm     }, "EngAlarm Off",       "EngAlarm On",  white, black, green, black
   indicator = { AIOT         }, "AIOT Off",               "AIOT On",  white, black, green, black
   indicator = { PB4out       }, "PB4out Off",           "PB4out On",  white, black, green, black
   indicator = { PB5out       }, "PB5out Off",           "PB5out On",  white, black, green, black
   indicator = { PB6out       }, "PB6out Off",          " PB6out On",  white, black, green, black

;  "PortKbits" bit field:

   indicator = { LOPalrm      }, "LOPalrm Off",         "LOPalrm On",    white, black, green, black
   indicator = { HOTalrm      }, "HOTalrm Off",         "HOTalrm On",    white, black, green, black
   indicator = { HETalrm      }, "HETalrm Off",         "HETalrm On",    white, black, green, black
   indicator = { HEGTalrm     }, "HEGTalrm Off",       "HEGTalrm On",    white, black, green, black
   indicator = { HFTalrm      }, "HFTalrm Off",         "HFTalrm On",    white, black, green, black
   indicator = { LFPalrm      }, "LFPalrm Off",         "LFPalrm On",    white, black, green, black
   indicator = { HFPalrm      }, "HFPalrm Off",         "HFPalrm On",    white, black, green, black
   
;  "PortPbits" bit field:

   indicator = { Inj1         }, "Inj1 Off",               "Inj1 On",    white, black, green, black
   indicator = { Inj2         }, "Inj2 Off",               "Inj2 On",    white, black, green, black
   indicator = { Inj3         }, "Inj3 Off",               "Inj3 On",    white, black, green, black
   indicator = { Inj4         }, "Inj4 Off",               "Inj4 On",    white, black, green, black
   indicator = { Inj5         }, "Inj5 Off",               "Inj5 On",    white, black, green, black

;  "PortTbits" bit field:
   
   indicator = { CMP          }, "CMP Off",                 "CMP On",    white, black, green, black
   indicator = { CKP          }, "CKP Off",                 "CKP On",    white, black, green, black
   indicator = { VSpd         }, "VSpd Off",               "VSpd On",    white, black, green, black
   indicator = { Ign1         }, "Ign1 Off",               "Ign1 On",    white, black, green, black
   indicator = { Ign2         }, "Ign2 Off",               "Ign2 On",    white, black, green, black
   indicator = { Ign3         }, "Ign3 Off",               "Ign3 On",    white, black, green, black
   indicator = { Ign4         }, "Ign4 Off",               "Ign4 On",    white, black, green, black
   indicator = { Ign5         }, "Ign5 Off",               "Ign5 On",    white, black, green, black
   
;  "engine2" bit field:
   
   indicator = { base512      }, "Base 512 Off",       "Base 512 On",    white, black, green, black
   indicator = { base256      }, "Base 256 Off",       "Base 256 On",    white, black, green, black
   indicator = { AudAlrm      }, "Aud Alrm On",       "Aud Alrm Off",    white, black, green, black
   indicator = { TOEduron     }, "TOE Dur Off",         "TOE Dur On",    white, black, green, black
   
;  "alarmbits" bit field:

   indicator = { LOP          }, "Oil Prs OK",         "Low Oil Prs",   white, black, green, black
   indicator = { HOT          }, "Oil Temp OK",      "High Oil Temp",   white, black, green, black
   indicator = { HET          }, "CLT Temp OK",      "High Clt Temp",   white, black, green, black
   indicator = { HEGT         }, "EXH Temp OK",      "High Exh Temp",   white, black, green, black
   indicator = { HFT          }, "Fuel Temp OK",    "High Fuel Temp",   white, black, green, black
   indicator = { LFP          }, "LO FP OK",          "Low Fuel Prs",   white, black, green, black
   indicator = { HFP          }, "Hi FP OK",         "High Fuel Prs",   white, black, green, black
   
;  "AAoffbits" bit field:
  
   indicator = { LOPoff       }, "LOP Alrm OK",       "LOP Alrm Sil",   white, black, green, black
   indicator = { HOToff       }, "HOT Alrm OK",       "HOT Alrm Sil",   white, black, green, black
   indicator = { HEToff       }, "HET Alrm OK",       "HET Alrm Sil",   white, black, green, black
   indicator = { HEGToff      }, "HEGT Alrm OK",     "HEGT Alrm Sil",   white, black, green, black
   indicator = { HFToff       }, "HFT Alrm OK",       "HFT Alrm Sil",   white, black, green, black
   indicator = { LFPoff       }, "LFP Alrm OK",       "LFP Alrm Sil",   white, black, green, black
   indicator = { HFPoff       }, "HFP Alrm OK",       "HFP Alrm Sil",   white, black, green, black
   
;  "StateStatus" bit field:

   indicator = { Synch        }, "No Crank Synch",   "Crank Synched",   white, black, green, black
   indicator = { SynchLost    }, "Synch not lost",      "Synch Lost",   white, black, green, black
   indicator = { StateNew     }, "No New State",         "New State",   white, black, green, black


[GaugeConfigurations]

;-----------------------------------------------------------------------------------------------
; Define a gauge's characteristics here, then go to a specific layout
; block (Tuning or FrontPage) and use the name you've defined here to
; display that gauge in a particular position.
;
; Name  = Case-sensitive, user-defined name for this gauge configuration.
; Var   = Case-sensitive name of variable to be displayed, see the
;         OutputChannels block in this file for possible values.
; Title = Title displayed at the top of the gauge.
; Units = Units displayed below value on gauge.
; Lo    = Lower scale limit of gauge.
; Hi    = Upper scale limit of gauge.
; LoD   = Lower limit at which danger color is used for gauge background.
; LoW   = Lower limit at which warning color is used.
; HiW   = Upper limit at which warning color is used.
; HiD   = Upper limit at which danger color is used.
; vd    = Decimal places in displayed value
; ld    = Label decimal places for display of Lo and Hi, above.
;-----------------------------------------------------------------------------------------------
   ;Name               Var            Title                 Units      Lo     Hi     LoD    LoW    HiW   HiD vd ld
   secHGge         = secH,                    "secH",   "Sec x 255",   0,     255,   -1,    -1,   256,   256, 0, 0
   secLGge         = secL,                    "secL",     "Seconds",   0,     255,   -1,    -1,   256,   256, 0, 0
   batAdcGge       = batAdc,                "batAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   BatVGge         = BatVx10,      "Battery Voltage",       "Volts",   0,     20,     8,    -1,    15,    18, 1, 1
   cltAdcGge       = cltAdc,                "cltAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
#if CELSIUS
   CltGauge        = CLT,      "Engine Coolant Temp",       "Deg C", -40,     110,  -40,  -40,     95,   100, 1, 1
#else
   CltGauge        = CLT,      "Engine Coolant Temp",       "Deg F", -40,     220,  -40,   -40,   205,   215, 1, 1
   matAdcGge       = matAdc,                "matAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
#if CELSIUS
   MatGauge        = Matx10,     "Manifold Air Temp",       "Deg C", -40,     110,  -40,  -40,     95,   100, 1, 1
#else
   MatGauge        = Matx10,     "Manifold Air Temp",       "Deg F", -40,     220,  -40,   -40,   205,   215, 1, 1

   PAD03inAdcGge   = PAD03inAdc,        "PAD03inAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   mapAdcGge       = mapAdc,                "mapAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   MapGge          = Mapx10, "Manifold Abs Pressure",         "KPA",   0,     105,   -1,    -1,   106,   106, 1, 1
   tpsADCGge       = tpsADC,                "tpsADC",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   TpsPctGge       = TpsPctx10, "Throttle Position ",           "%",   0,     100,   -1,    -1,   999,   999, 1, 1
   egoAdc1Gge      = egoAdc1,              "egoADC1",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   afr1Gge         = afr1,        "Air/Fuel Ratio 1",    "Air/Fuel",   7,      23,    9,    10,    20,    22, 1, 1
   baroAdcGge      = baroAdc,              "baroAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   BaroGge         = Barox10,  "Barometric Pressure",         "KPA",   0,     105,   -1,    -1,   106,   106, 1, 1
   eopAdcGge       = eopAdc,                "eopAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   EopGge          = Eopx10,   "Engine Oil Pressure",         "PSI",   0,    100,    10,    20,   100,   100, 1, 1
   efpAdcGge       = efpAdc,                "efpAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   EfpGge          = Efpx10,  "Engine Fuel Pressure",         "PSI",   0,    100,    25,    30,    50,    55, 1, 1
   itrmAdcGge      = itrmAdc,              "itrmAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   ItrmGge         = Itrmx10,       "Ignition Trim ",     "Degrees",   0,      40,   -1,    -1,    41,    41, 0, 0
   ftrmAdcGge      = ftrmAdc,              "ftrmAdc",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   FtrmGge         = Ftrmx10,           "Fuel Trim ",           "%",  80,     120,   79,    79,   121,   121, 1, 1
   egoAdc2Gge      = egoAdc2,             "egoADC2",      "Counts",   0,    1023,   -1,    -1,  1024,  1024, 0, 0
   afr2Gge         = afr2,        "Air/Fuel Ratio 2",    "Air/Fuel",   7,      23,    9,    10,    20,    22, 1, 1
   CASprd512Gge    = CASprd512,         "CAS Period",      "5.12uS",   0,   65535,   -1,    -1, 65536, 65536, 0, 0
   CASprd256Gge    = CASprd256,         "CAS Period",      "2.56uS",   0,   65535,   -1,    -1, 65536, 65536, 0, 0
   VSSprdGge       = VSSprd,            "VSS Period",      "2.56uS",   0,   65535,   -1,    -1, 65536, 65536, 0, 0
   RPMGge          = RPM,               "Engine RPM",         "RPM",   0,    5000,   -1,    -1,  5001,  5001, 0, 0
   KPHGge          = KPH,            "Vehicle Speed",         "KPH",   0,     150,   -1,    -1,   151,   151, 1, 1
   ASEcntGge       = ASEcnt,           "ASE counter",        "Revs",   0,     500,   -1,    -1,   501,   501, 0, 0
   AFRcurrGge      = AFRcurr,          "AFR Current",    "AIR/FUEL",   8,      25,    9,    10,    20,    22, 1, 1
   VEcurrGge       = VEcurr,            "VE Current",           "%",   0,     150,   -1,    -1,   151,   151, 1, 1
   barocorGge      = barocor,             "Baro Cor",           "%",  80,     120,   -1,    -1,   121,   121, 1, 1
   matcorGge       = matcor                "MAT Cor",           "%",  70,     130,   -1,    -1,   131,   131, 1, 1
   WUEcorGge       = WUEcor,               "WUE Cor",           "%", 100,     250,   -1,    -1,   251,   251, 1, 1
   ASEcorGge       = ASEcor,               "ASE Cor",           "%",   0,      55,   -1,    -1,    55,    55, 1, 1
   WUEandASEcorGge = WUEandASEcor,   "WUEandASE Cor",           "%",   0,     250,   -1,    -1,   251,   251, 1, 1
   CrankcorGge     = Crankcor,        "Crankcor",           "%", 100,     350,   -1,    -1,   351,   351, 1, 1
   TPSdotGge       = TPSdot,                "tpsDOT",      " %/Sec",   0,     600,   -1,    -1,   601,   601, 0, 0 
   TpsDOTcorGge    = TpsDOTcor,          "TpsDOTcor",           "%",   0,      60,   -1,    -1,    61,    61, 0, 0
   ColdAddpctGge   = ColdAddpct,        "ColdAddpct",           "%",   0,      50,   -1,    -1,    51,    51, 0, 0
   ColdMulpctGge   = ColdMulpct,        "ColdMulpct",           "%",   0,     255,   -1,    -1,   256,   256, 0, 0
   TOEpctGge       = TOEpct,               "TOE pct",           "%",   0,      75,   -1,    -1,    76,    76, 0, 0 
   TOEpwGge        = TOEpw,                 "TOE PW",        "mSec",   0,      51,   -1,    -1,    52,    52, 1, 1
   PWlessTOEGge    = PWlessTOE,          "PWlessTOE",        "mSec",   0,     100,   -1,    -1,   101,   101, 1, 1
   DeadbandGge     = Deadband,            "Deadband",        "mSec",   0,       2,   -1,    -1,     3,     3, 1, 1
   PrimePWGge      = PrimePW,             "Prime PW",        "mSec",   0,      70,   -1,    -1,    71,    71, 1, 1
   CrankPWGge      = CrankPW,             "Crank PW",        "mSec",   0,      70,   -1,    -1,    71,    71, 1, 1
   FDpwGge         = FDpw,        "Fuel Delivery PW",        "mSec",   0,      70,   -1,    -1,    71,    71, 1, 1
   PWGge           = PW,       "Injector Pulsewidth",        "mSec",   0,      70,   -1,    -1,    71,    71, 1, 1
   LpHGge          = LpH,                      "LpH",            "",   0,     100,   -1,    -1, 65536, 65536, 1, 1
   FDsecGge        = FDsec,      "FD total mSec/Sec",        "mSec",   0,   65535,   -1,    -1, 65536, 65536, 1, 1
   OFCdelCntGge    = OFCdelCnt,          "OFC Delay",  "100mS cnts",   0,      50,   -1,    -1,    51,    51, 0, 0
   TOEdurCntGge    = TOEdurCnt,       "TOE duration",  "100mS cnts",   0,      50,   -1,    -1,    51,    51, 0, 0
   STcurrGge       = STcurr,            "ST Current",         "Deg",   0,      50,   -1,    -1,    51,    51, 1, 1
   KmpLGge         = KmpL,                    "KmpL",        "KmpL",   0,      20,   -1,    -1, 65536, 65536, 1, 1
   DwellCorGge     = DwellCor,    "Dwell Correction",           "%",   0,     500,   -1,    -1,   501,   501, 1, 1
   DwellFinGge     = DwellFin,            "DwellFin",         "mSec",  0,      50,   -1,    -1,    51,    51, 1, 1
   AdvanceGge      = Advance,        "Spark Advance",         "Deg",   0,      65,   -1,    -1,    66,    66, 1, 1   
   LoopTimeGge     = LoopTime,    "Loops per Second",       "Loops",   0,   65535,   -1,    -1, 65535, 65535, 0, 0
   DutyCycleGge    = DutyCyclex10,       "DutyCycle",           "%",   0,     100,   -1,    -1,   101,   101, 1, 1
   TestValwGge     = TestValw,            "TestValw",            "",   0,   65535,   -1,    -1, 65535, 65535, 0, 0
   testValbGge     = testValb,            "testValb",            "",   0,   65535,   -1,    -1, 65535, 65535, 0, 0
   FDtGge          = FDt,            "FD total mSec",        "mSec",   0,   65535,   -1,    -1, 65536, 65536, 1, 1
   MpGGge          = MpG,                    "MpG",           "MpG",   0,      40,   -1,    -1, 65536, 65536, 1, 1

[OutputChannels]
   ochGetCommand    = "O"
   ochBlockSize     = 139

   ;  name          = class,  type,offset, shape,    units,  scale, translate,    lo,     hi, digits
      secH          = scalar,  U08,     0,     "Sec x 255",  1.00000,    0.00,   0.00,   255,      0
      secL          = scalar,  U08,     1,       "Seconds",  1.00000,    0.00,   0.00,   255,      0
      batAdc        = scalar,  U16,     2,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      BatVx10       = scalar,  S16,     4,         "Volts",  0.10000,    0.00,   0.00,    20,      1  
      cltAdc        = scalar,  U16,     6,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
#if CELSIU
      Cltx10        = scalar,  S16,     8,          "DegC",  0.05555, -320.00,    -42,   110,      1
#else 
      Cltx10        = scalar,  S16,     8,          "DegF",  0.10000,    0.00,  -45.0,   230,      1
      matAdc        = scalar,  U16,    10,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
#if CELSIUS
      Matx10        = scalar,  S16,    12,          "DegC",  0.05555, -320.00,    -42,   110,      1
#else
      Matx10        = scalar,  S16,    12,          "DegF",  0.10000,    0.00,  -45.0,   230,      1     
      PAD03inAdc    = scalar,  U16,    14,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Place16       = scalar,  U16,    16,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      mapAdc        = scalar,  U16,    18,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Mapx10        = scalar,  U16,    20,           "KPA",  0.10000,    0.00,   0.00,   110,      1
      tpsADC        = scalar,  U16,    22,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      TpsPctx10     = scalar,  U16,    24,             "%",  0.10000,    0.00,   0.00,   100,      1
      egoAdc1       = scalar,  U16,    26,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      afr1x10       = scalar,  U16,    28,           "AFR",  0.10000,    0.00,      7,    25,      1       
      baroAdc       = scalar,  U16,    30,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Barox10       = scalar,  U16,    32,           "KPA",  0.10000,    0.00,   0.00,   110,      1
      eopAdc        = scalar,  U16,    34,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Eopx10        = scalar,  U16,    36,           "PSI",  0.10000,    0.00,   0.00,   100,      1
      efpAdc        = scalar,  U16,    38,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Efpx10        = scalar,  U16,    40,           "PSI",  0.10000,    0.00,   0.00,   100,      1
      itrmAdc       = scalar,  U16,    42,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Itrmx10       = scalar,  S16,    44,             "°",  0.10000,    0.00,   0.00,    40,      1       
      ftrmAdc       = scalar,  U16,    46,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      Ftrmx10       = scalar,  U16,    48,             "%",  0.10000,    0.00,   80.0, 120.0,      1
      egoAdc2       = scalar,  U16,    50,        "Counts",  1.00000,    0.00,   0.00,  1023,      0
      afr2x10       = scalar,  U16,    52,           "AFR",  0.10000,    0.00,      7,    25,      1         
      CASprd512     = scalar,  U16,    54,       "uS/5.12",  1.00000,    0.00,   0.00, 65535,      0
      CASprd256     = scalar,  U16,    56,       "uS/2.56",  1.00000,    0.00,   0.00, 65535,      0
	  VSSprd        = scalar,  U16,    58,       "uS/2.56",  1.00000,    0.00,   0.00, 65535,      0
	  RPM           = scalar,  U16,    60,           "RPM",  1.00000,    0.00,   0.00,  5000,      0
	  KPH           = scalar,  U16,    62,           "KPH",  0.10000,    0.00,   0.00,   150,      1
	  ASEcnt        = scalar,  U16,    64,            "",    1.00000,    0.00,   0.00,   500,      0
	  AFRcurr       = scalar,  U16,    66,             "%",  0.01000,    0.00,   0.00,    25,      1
	  VEcurr        = scalar,  U16,    68,             "%",  0.10000,    0.00,   0.00,   150,      1
	  barocor       = scalar,  U16,    70,             "%",  0.10000,    0.00,   0.00,   120,      1
	  matcor        = scalar,  U16,    72,             "%",  0.10000,    0.00,   0.00,   126,      1
	  WUEcor        = scalar,  U16,    74,             "%",  0.10000,    0.00,   0.00,   200,      1
	  ASEcor        = scalar,  U16,    76,             "%",  0.10000,    0.00,   0.00,   600,      1
	  WUEandASEcor  = scalar,  U16,    78,             "%",  0.10000,    0.00,   0.00,   800,      1
	  Crankcor      = scalar,  U16,    80,             "%",  0.10000,    0.00,   0.00,   400,      1
	  TpsPctDOT     = scalar,  U16,    82,         "%/Sec",  1.00000,    0.00,   0.00,   600,      0   
	  TpsDOTcor     = scalar,  U08,    84,             "%"   1.00000,    0.00,   0.00,    50,      0
	  ColdAddpct    = scalar,  U08,    85,             "%",  1.00000,    0.00,   0.00,    50,      0
	  ColdMulpct    = scalar,  U08,    86,             "%",  1.00000,    0.00,   0.00,   150,      0
	  TOEpct        = scalar,  U08,    87,             "%",  1.00000,    0.00,   0.00,    50,      0
	  TOEpw         = scalar,  U16,    88,            "mS",  0.10000,    0.00,   0.00,    50,      1
	  PWlessTOE     = scalar,  U16,    90,            "mS",  0.10000,    0.00,   0.00,    50,      1
	  Deadband      = scalar,  U16,    92,            "mS",  0.10000,    0.00,   0.00,     2,      1
	  PrimePW       = scalar,  U16,    94,            "mS",  0.10000,    0.00,   0.00,    70,      1
	  CrankPW       = scalar,  U16,    96,            "mS",  0.10000,    0.00,   0.00,    70,      1
	  FDpw          = scalar,  U16,    98,            "mS",  0.10000,    0.00,   0.00,    50,      1
	  PW            = scalar,  U16,   100,            "mS",  0.10000,    0.00,   0.00,    50,      1
	  LpH           = scalar,  U16,   102,           "LpH",  0.10000,    0.00,   0.00, 65535,      1
	  FDsec         = scalar,  U16,   104,            "mS",  1.00000,    0.00,   0.00, 65535,      0
	  OFCdelCnt     = scalar,  U08,   106,              "",  1.00000,    0.00,   0.00, 65535,      0
	  TOEdurCnt     = scalar,  U08,   107,              "",  1.00000,    0.00,   0.00, 65535,      0
	  FDt           = scalar,  U16,   108,          "mSec",  0.10000,    0.00,   0.00, 65535,      1
	  STcurr        = scalar,  U16,   110,           "Deg",  0.10000,    0.00,   0.00,    50,      1
	  KmpL          = scalar,  U16,   112,          "KmpL",  0.10000,    0.00,   0.00, 65535,      1
	  DwellCor      = scalar,  U16,   114,             "%",  0.10000,    0.00,   0.00,   500,      1
	  DwellFin      = scalar,  U16,   116,          "mSec",  0.10000,    0.00,   0.00,    50,      1
	  STandItrmx10  = scalar,  U16,   118,           "Deg",  0.10000,    0.00,   0.00,    50,      1
      PortAbits     = scalar,  U08,   120,           "bit",  1.00000,    0.00, ; Port A status bits
      LoadEEEM      = bits,    U08,   120, [0:0]                               ; LoadEEEM
      Itrimen       = bits,    U08,   10, [1:1]                               ; SW3, Board 57 to 82
      Ftrimen       = bits,    U08,   120, [2:2]                               ; SW6, Board 57 to 82
      AudAlrmSil    = bits,    U08,   120, [3:3]                               ; SW2on57to82, 0 = Fuel trim disabled(Grn), 1 = Fuel trim enabled(Red)
      OFCen         = bits,    U08,   120, [4:4]                               ; SW5on57to82, 0 = Ignition trim disabled(Grn), 1 = Ignition trim enabled(Red)
      OFCdis        = bits,    U08,   120, [5:5]                               ; SW1, Board 57 to 82
      PA6in         = bits,    U08,   120, [6:6]                               ; SW2 on CPU, 0 = EEM load enabled(Red), 1 = EEMload not enabled(Grn)
      PA7           = bits,    U08,   120, [7:7]                               ; SW4, Board 57 to 82
      PortBbits     = scalar,  U08,   121,           "bit",  1.00000,    0.00, ; Port B status bits
      FuelPump      = bits,    U08,   121, [0:0]                               ; D9on1to28, 0 = Fuel Pump off(Red), 1 = Fuel pump on(Grn)
      ASDRelay      = bits,    U08,   121, [1:1]                               ; D23 Board 1 to 28,  0 = ASD Relay off(Red), 1 = ASD Relay on(Grn) 
      EngAlarm      = bits,    U08,   121, [2:2]                               ; D4 Board 1 to 28 
      AIOT          = bits,    U08,   121, [3:3]                               ; D20 Board 1 to 28 
      PB4out        = bits,    U08,   121, [4:4]                               ; D10 Board 1 to 28 
      PB5out        = bits,    U08,   121, [5:5]                               ; D9 Board 29 to 56, 0 = Alarm Relay off(Grn), 1 = Alarm Relay on(Red) 
      PB6out        = bits,    U08,   121, [6:6]                               ; D10 Board 29 to 56, 0 = AIOT no pulse(Grn), 1 = AIOT pulse(Red) 
      PB7           = bits,    U08,   121, [7:7]                               ; D2 Board 29 to 56
      PortKbits     = scalar,  U08,   122,           "bit",   1.000,    0.00,  ; Port K status bits
      LOPalrm       = bits,    U08,   122, [0:0]                               ; D22 Board 1 to 28
      HOTalrm       = bits,    U08,   122, [1:1]                               ; D6 Board 1 to 28
      HETalrm       = bits,    U08,   122, [2:2]                               ; D25 Board 1 to 28
      HEGTalrm      = bits,    U08,   122, [3:3]                               ; D2 Board 1 to 28
      HFTalrm       = bits,    U08,   122, [4:4]                               ; D19 Board 1 to 28
      LFPalrm       = bits,    U08,   122, [5:5]                               ; D3 Board 1 to 28
      HFPalrm       = bits,    U08,   122, [7:7]                               ; D2 Board 87 to 112
      PortPbits     = scalar,  U08,   123,           "bit",   1.000,    0.00,  ; Port P status bits
      Inj1 (1&10)   = bits,    U08,   123, [0:0]                               ; D21 Board 1 to 28, Ign 3
      Inj2 (9&4)    = bits,    U08,   123, [1:1]                               ; D5 Board 1 to 28, Ign 4
      Inj3 (3&6)    = bits,    U08,   123, [2:2]                               ; D24 Board 1 to 28, Ign 5
      Inj4 (5&8)    = bits,    U08,   123, [3:3]                               ; D1 Board 1 to 28, Inj 1
      Inj5 (7&2)    = bits,    U08,   123, [4:4]                               ; D3 Board 87 to 112, Inj 2
      PP5out        = bits,    U08,   123, [5:5]                               ; D6 Board 87 to 112, Inj 3
      PortTbits     = scalar,  U08,   124,          "bit",   1.000,     0.00,  ; Port T status bits
      CMP           = bits,    U08,   124, [0:0]                               ; D21 Board 1 to 28, Ign 3
      CKP           = bits,    U08,   124, [1:1]                               ; D5 Board 1 to 28, Ign 4
      VSpd          = bits,    U08,   124, [2:2]                               ; D24 Board 1 to 28, Ign 5
      Ign1 (1&6)    = bits,    U08,   124, [3:3]                               ; D1 Board 1 to 28, Inj 1
      Ign2 (10&5)   = bits,    U08,   124, [4:4]                               ; D3 Board 87 to 112, Inj 2
      Ign3 (9&8)    = bits,    U08,   124, [5:5]                               ; D6 Board 87 to 112, Inj 3
      Ign4 (4&7)    = bits,    U08,   124, [6:6]                               ; D1 Board 87 to 112, Inj 4
      Ign5 (3&2)    = bits,    U08,   124, [7:7]                               ; D7 Board 87 to 112, Inj 5
      engine        = scalar,  U08,   125,          "bit",   1.000,     0.00,  ; engine status bits
      OFCdelon      = bits,    U08,   125, [0:0]                               ; 0 = OFC delay not on(Grn), 1 = OFC delay on(Red)
      crank         = bits,    U08,   125, [1:1]                               ; 0 = engine not cranking(Grn), 1 = engine cranking(Red)
      run           = bits,    U08,   125, [2:2]                               ; 0 = engine not running(Red), 1 = engine running(Grn)
      ASEon         = bits,    U08,   125, [3:3]                               ; 0 = not in ASE(Grn), 1 = in ASE(Red)
      WUEon         = bits,    U08,   125, [4:4]                               ; 0 = not in WUE(Grn), 1 = in WUE(Red)
      TOEon         = bits,    U08,   125, [5:5]                               ; 0 = not in TOE mode(Grn), 1 = in TOE mode(Red)
      OFCon         = bits,    U08,   125, [6:6]                               ; 0 = not in OFC mode(Grn), 1 = in OFC mode(Red)
      FldClr        = bits,    U08,   125, [7:7]                               ; 0 = not in flood clear mode(Grn), 1 = in flood clear mode(Red)
      engine2       = scalar,  U08,   126,          "bit",   1.000,     0.00,  ; engine2 staatus
      base512       = bits,    U08,   126, [0:0]                               ; 0 = 5.12uS time base off(White), 1 = 5.12uS time base on(Grn)
      base256       = bits,    U08,   126, [1:1]                               ; 0 = 2.56uS time base off(White), 1 = 2.56uS time base on(Grn)
      AudAlrm       = bits,    U08,   126, [2:2]                               ; 0 = Audible Alarm on(Grn), 1 = Audible Alarm off(Red)
      TOEduron      = bits,    U08,   126, [3:3]                               ; 0 = TOE duration not on(Grn), 1 = TOE duration on(Red) 
      eng2bit4      = bits,    U08,   126, [4:4]                               ; 0 = , 1 = 
      eng2bit5      = bits,    U08,   126, [5:5]                               ; 0 = , 1 = 
      eng2bit6      = bits,    U08,   126, [6:6]                               ; 0 = , 1 = 
      eng2bit7      = bits,    U08,   126, [7:7]                               ; 0 = , 1 =
      alarmbits     = scalar,  U08,   127,          "bit",   1.000,     0.00,  ; engine alarm status 
      LOP           = bits,    U08,   127, [0:0]                               ; 0 = No low oil pressure(Grn), 1 = Low oil pressure(Red) 
      HOT           = bits,    U08,   127, [1:1]                               ; 0 = No high oil temperature(Grn), 1 = High oil temperature(Red) 
      HET           = bits,    U08,   127, [2:2]                               ; 0 = No high engine temperature(Grn), 1 = High engine temperature(Red)  
      HEGT          = bits,    U08,   127, [3:3]                               ; 0 = No high exhaust temperature(Grn), 1 = High exhaust temperatrue(Red) 
      HFT           = bits,    U08,   127, [4:4]                               ; 0 = No high fuel temperature(Grn), 1 = High fuel temperature(Red) 
      LFP           = bits,    U08,   127, [5:5]                               ; 0 = No Low fuel pressure(Grn), 1 = Low fuel pressure(Red)
      HFP           = bits,    U08,   127, [6:6]                               ; 0 = No high fuel pressure(Grn), 1 = High fuel pressure(Red)
      Bit7          = bits,    U08,   127, [7:7]                               ; 0 = , 1 =
      AAoffbits     = scalar,  U08,   128,          "bit",   1.000,     0.00,  ; audio alarm off status 
      LOPoff        = bits,    U08,   128, [0:0]                               ; 0 = No LOP audio alarm silence(Grn), 1 = LOP audio alarm silence(Red) 
      HOToff        = bits,    U08,   128, [1:1]                               ; 0 = No HOT audio alarm silence(Grn), 1 = HOT audio alarm silence(Red) 
      HEToff        = bits,    U08,   128, [2:2]                               ; 0 = No HET audio alarm silence(Grn), 1 = HET audio alarm silence(Red)  
      HEGToff       = bits,    U08,   128, [3:3]                               ; 0 = No HEGT audio alarm silence(Grn), 1 = HEGT audio alarm silence(Red) 
      HFToff        = bits,    U08,   128, [4:4]                               ; 0 = No HFT audio alarm silence(Grn), 1 = HFT audio alarm silence(Red) 
      LFPoff        = bits,    U08,   128, [5:5]                               ; 0 = No LFP audio alarm silence(Grn), 1 = LFP audio alarm silence(Red)
      HFPoff        = bits,    U08,   128, [6:6]                               ; 0 = No HFP audio alarm silence, 1 = HFP audio alarm silence(Red)
      Bit7off       = bits,    U08,   128, [7:7]                               ; 0 = , 1 =
	  StateStatus   = scalar,  U08,   129,          "bit",   1.000,     0.00,  ; state machine status 
      Synch         = bits,    U08,   129, [0:0]                               ; 0 = Crank position not synchronised(Red), 1 = Crank position sycnchronised(Grn)             
      SynchLost     = bits,    U08,   129, [1:1]                               ; 0 = Crank synch not lost(Grn), 1 = Crank synch lost(Red)          
      StateNew      = bits,    U08,   129, [2:2]                               ; 0 = , 1 = 
      StateStatus3  = bits,    U08,   129, [3:3]                               ; 0 = , 1 =      
      StateStatus4  = bits,    U08,   129, [4:4]                               ; 0 = , 1 =     
      StateStatus5  = bits,    U08,   129, [5:5]                               ; 0 = , 1 = 
      StateStatus6  = bits,    U08,   129, [6:6]                               ; 0 = , 1 =      
      StateStatus7  = bits,    U08,   129, [7:7]                               ; 0 = , 1 =     
      LoopTime      = scalar,  U16,   130,   "Loops/Sec",   1.000,     0.000,   0.00, 65535,      0
	  DutyCyclex10  = scalar,  U16    132,           "%",   1.000,     0.000,   0.00,   100,      0
	  MpG           = scalar,  U16,   134,         "MpG",  0.1000,      0.00,   0.00, 65535,      1
      TestValw      = scalar,  U16,   136,            "",   1.000,     0.000,   0.00, 65535,      0
      testValb      = scalar,  U08,   138,            "",   1.000,     0.000,   0.00,   255,      0
	  
; 138 + 1 = 139 bytes
; NOTE! exact wording afr1 and TPSdot must be used for Time Based Accel to work
; NOTE! exact wording tpsMin, tpsMax and tpsADC must be used for TPS calibrator to work

; -------------------------------------- Computed outputs --------------------------------------

;***********************************************************************************************
; - Linear interpolation:
;
;   X1 Y1
;   X2 Y2
;   X3 Y3
;
;   Solve for Y2. X1,X2,X3,Y1,Y3 are known
;
;   Y2 = (((X2 - X1) * (Y3 - Y1)) / (X3 - X1)) + Y1
;
;***********************************************************************************************
; - These are required for TS

    time     = { timeNow }   ; "timeNow" is a parameterless built-in function from PC.
    BatV     = { BatVx10 }   ; Battery Voltage to 1 decimal places
    Baro     = { Barox10 }   ; Barometric Pressure in KPA to 1 decimal place
    Map      = { Mapx10 }    ; Manifold Absolute Pressure in KPA to 1 decimal place
    CLT      = { Cltx10 }    ; Coolant temperature in degrees F to 1 decimal place
    Mat      = { Matx10 }    ; Manifold Air Temperature in degrees F to 1 decimal place
    afr1     = { afr1x10 }   ; Air Fuel Ratio to 1 decimal places Left bank odd cylinders
    afr2     = { afr2x10 }   ; Air Fuel Ratio to 1 decimal places Right bank even cylinders
;    Eop      = { Eopx10 }    ; Engine Oil Pressure in PSI to 1 decimal place
;    Efp      = { Efpx10 }    ; Engine Fuel Pressure in PSI to 1 decimal place
    TpsPct   = { TpsPctx10 } ; Throttle position Sensor % of travel to 1 decimal place
;    Ftrm     = { Ftrmx10 }   ; Fuel Trim Percent to 1 decimal place
;    Itrm     = { Itrmx10 }   ; Ignition Trim Degrees to 1 decimal place
    Advance   = { STandItrmx10 - 20}  ; Actual ignition advance
    TPSdot    = { TpsPctDOT }    


 ; NOTE! Exact "CLT" name required for MLV    
    
;***********************************************************************************************
; - MPX4115AP
;   Vout = 5.1*((P*.009)-.095)
;   P = (Vout/5.1+.095)/.009
;***********************************************************************************************


[Datalog]
;          Channel,                   Label,      Type,   Format  Bytes   
   entry = time,                     "Time",     float,   "%.3f"  ; ?
   entry = secL,                     "secL",       int,     "%d"  ; 1
   entry = batAdc,                 "batAdc",       int,     "%d"  ; 2
   entry = BatVx10,               "BatVx10",     float,   "%.1f"  ; 2
   entry = cltAdc,                 "cltAdc",       int,     "%d"  ; 2
   entry = CLT,                    "CLTx10",     float,   "%.1f"  ; 2
   entry = matAdc,                 "matAdc",       int,     "%d"  ; 2
   entry = Matx10,                 "Matx10",     float,   "%.1f"  ; 2
   entry = PAD03inAdc,         "PAD03inAdc",       int,     "%d"  ; 2
   entry = mapAdc,                 "mapAdc",       int,     "%d"  ; 2
   entry = Mapx10,                 "MAPx10",     float,   "%.1f"  ; 2
   entry = tpsADC,                 "tpsADC",       int,     "%d"  ; 2
   entry = TpsPctx10,           "TpsPctx10",     float,   "%.1f"  ; 2
   entry = egoAdc1,               "egoAdc1",       int,     "%d"  ; 2
   entry = afr1,                     "AFR1",     float,   "%.1f"  ; 2
   entry = baroAdc,               "baroAdc",       int,     "%d"  ; 2
   entry = Barox10,               "Barox10",     float,   "%.1f"  ; 2
   entry = eopAdc,                 "eopAdc",       int,     "%d"  ; 2
   entry = Eopx10,                 "Eopx10",     float,   "%.1f"  ; 2 
   entry = efpAdc,                 "efpAdc",       int,     "%d"  ; 2
   entry = Efpx10,                    "Efp",     float,   "%.1f"  ; 2
   entry = itrmAdc,               "itrmAdc",       int,     "%d"  ; 2
   entry = Itrmx10,               "Itrmx10",     float,     "%d"  ; 2 
   entry = ftrmAdc,               "ftrmAdc",       int,     "%d"  ; 2   
   entry = Ftrmx10,               "Ftrmx10",     float,   "%.1f"  ; 2
   entry = egoAdc2,               "egoAdc2",       int,     "%d"  ; 2
   entry = afr2,                      "AFR2",     float,   "%.1f"  ; 2   
   entry = CASprd512,           "CASprd512",       int,     "%d"  ; 2
   entry = CASprd256,           "CASprd256",       int,     "%d"  ; 2
   entry = VSSprd,                 "VSSprd",       int,     "%d"  ; 2
   entry = RPM,                       "RPM",       int,     "%d"  ; 2
   entry = KPH,                       "KPH",     float,   "%.1f"  ; 2
   entry = AFRcurr,               "AFRCurr",     float,   "%.1f"  ; 2 
   entry = VEcurr,                    "Gve",     float,   "%.1f"  ; 2 
   entry = barocor,               "barocor",     float,   "%.1f"  ; 2 
   entry = matcor,                 "matcor",     float,   "%.1f"  ; 2 
   entry = WUEcor,                 "WUEcor",     float,   "%.1f"  ; 2 
   entry = ASEcor,                 "ASEcor",     float,   "%.1f"  ; 2
   entry = WUEandASEcor,     "WUEandASEcor",     float,   "%.1f"  ; 2
   entry = Crankcor,             "Crankcor",     float,   "%.1f"  ; 2
   entry = TPSdot,                 "TPSdot",       int,     "%d"  ; 2
   entry = TpsDOTcor,           "TpsDOTcor",       int,     "%d"  ; 1
   entry = ColdAddpct,         "ColdAddpct",       int,     "%d"  ; 1
   entry = ColdMulpct,         "ColdMulpct",       int,     "%d"  ; 1
   entry = TOEpct,                 "TOEpct",       int,     "%d"  ; 1 
   entry = TOEpw,                   "TOEpw",     float,   "%.1f"  ; 2
   entry = PWlessTOE,           "PWlessTOE",     float,   "%.1f"  ; 2
   entry = Deadband,             "Deadband",     float,   "%.1f"  ; 2
   entry = PrimePW,               "PrimePW",     float,   "%.1f"  ; 2
   entry = CrankPW,               "CrankPW",     float,   "%.1f"  ; 2
   entry = FDpw,                     "FDpw",     float,   "%.1f"  ; 2
   entry = PW,                         "PW",     float,   "%.1f"  ; 2
   entry = LpH,                       "LpH",     float,   "%.1f"  ; 2
   entry = FDsec,                   "FDsec",       int,     "%d"  ; 2
   entry = OFCdelCnt,           "OFCdelCnt",       int,     "%d"  ; 2
   entry = TOEdurCnt,           "TOEdurCnt",       int,     "%d"  ; 2
   entry = FDt,                       "FDt",     float,   "%.1f"  ; 2
   entry = STcurr,                 "STCurr",     float,   "%.1f"  ; 2
   entry = DwellCor,             "Dwellcor",     float,   "%.1f"  ; 2
   entry = DwellFin,             "DwellFin",     float,   "%.1f"  ; 2
   entry = STandItrmx10,     "STandItrmx10",     float,   "%.1f"  ; 2 
   entry = LoopTime,             "LoopTime",       int,     "%d"  ; 2


   






